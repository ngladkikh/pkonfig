[tool.poetry]
name = "pkonfig"
version = "2.0.0"
description = "Pythonic agile application configuration helpers"
authors = ["Nikita Gladkikh <gladkikh.nikita@gmail.com>"]
license = "MIT"
readme = "README.md"
keywords = [
    "config",
    "configuration",
    "configurations",
    "settings",
    "env",
    "environment",
    "environments",
    "dotenv",
    "application",
    "python-config",
    "yaml",
    "toml",
    "ini"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]

[tool.poetry.urls]
"homepage" = "https://github.com/ngladkikh/pkonfig"
"documentation" = "https://github.com/ngladkikh/pkonfig"
"repository" = "https://github.com/ngladkikh/pkonfig"

[tool.poetry.dependencies]
python = "^3.9 || ^3.10 || ^3.11 || ^3.12"
pyyaml = { version = "*", optional = true }
tomli = { version = "*", python = "<3.11", optional = true }

[tool.poetry.extras]
yaml = ["pyyaml"]
toml = ["tomli"]

[tool.poetry.group.dev.dependencies]
pytest = "*"
mypy = "*"
types-PyYAML = "*"
pylint = "*"
isort = "*"
black = "*"
pytest-cov = "*"
pyyaml = "*"
tomli = "^2.0.1"
docker = "^7.0.0"
coverage = {extras = ["toml"], version = "^7.5.0"}

[tool.poetry.group.benchmark.dependencies]
pydantic = "*"
pydantic-settings = "*"

[tool.poetry-dynamic-versioning]
enable = true
style = "pep440"  # Ensures the version style conforms to PEP 440

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]

[tool.coverage.run]
include = ["pkonfig/*"]
omit = ["tests/*"]

[tool.pylint.MASTER]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments"
]

[tool.pylint."STRING"]
check-quote-consistency = "no"
check-str-concat-over-line-jumps = "no"

[tool.pylint."TYPECHECK"]
contextmanager-decorators = "contextlib.contextmanager"
ignore-none = "yes"
ignore-on-opaque-inference = "yes"
ignored-checks-for-mixins = [
  "no-member",
  "not-async-context-manager",
  "not-context-manager",
  "attribute-defined-outside-init",
]
ignored-classes = [
  "optparse.Values",
  "thread._local",
  "_thread._local",
  "argparse.Namespace",
]
missing-member-hint = "yes"
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint."VARIABLES"]
allow-global-unused-variables = "yes"
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
init-import = "no"
redefining-builtins-modules = [
  "six.moves",
  "past.builtins",
  "future.builtins",
  "builtins",
  "io",
]
